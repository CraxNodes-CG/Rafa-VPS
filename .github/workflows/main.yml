name: VPS Critical Backup & SSHX

on:
  workflow_dispatch:

jobs:
  vps:
    runs-on: ubuntu-latest
    timeout-minutes: 335

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0

      - name: Create filesystem snapshot
        run: |
          echo "Creating filesystem snapshot..."
          TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
          SNAPSHOT_DIR="/mnt/snapshots/backup_$TIMESTAMP"
          mkdir -p "$SNAPSHOT_DIR"
          sudo rsync -a --exclude=/mnt --exclude=/proc --exclude=/sys --exclude=/dev --exclude=/run --exclude=/tmp / "$SNAPSHOT_DIR"
          echo "Snapshot created at $SNAPSHOT_DIR"

      - name: Prepare backup directory
        run: |
          echo "Preparing backup directory..."
          BACKUP_DIR="$GITHUB_WORKSPACE/vps_backups/backup_$TIMESTAMP"
          mkdir -p "$BACKUP_DIR"
          sudo rsync -a "$SNAPSHOT_DIR/" "$BACKUP_DIR/"
          sudo chown -R runner:runner "$BACKUP_DIR"
          echo "Backup prepared at $BACKUP_DIR"

      - name: Push backup to GitHub
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Pushing backup to GitHub..."
          cd "$GITHUB_WORKSPACE/vps_backups"
          git init -q
          git config user.email 'actions@github.com'
          git config user.name 'github-actions'
          git add --all
          git commit -m "Backup $TIMESTAMP" -q || true
          git branch -M vps-backups
          git remote remove origin 2>/dev/null || true
          git remote add origin https://$PAT_TOKEN@github.com/${{ github.repository }}.git
          git push -f origin vps-backups
          echo "Backup pushed to GitHub"

      - name: Clean up old backups
        run: |
          echo "Cleaning up old backups..."
          cd "$GITHUB_WORKSPACE/vps_backups"
          BACKUP_COUNT=$(ls -1q backup_* | wc -l)
          if [ "$BACKUP_COUNT" -gt 5 ]; then
            OLD_BACKUPS=$(ls -1tr backup_* | head -n -5)
            echo "Deleting old backups:"
            echo "$OLD_BACKUPS"
            rm -rf $OLD_BACKUPS
          fi
          echo "Old backups cleaned up"

      - name: Start SSHX
        run: |
          echo "Starting SSHX..."
          cd $GITHUB_WORKSPACE
          nohup bash -c "curl -sSf https://sshx.io/get | sh -s run > sshx_link.txt 2>&1" &
          sleep 10
          echo "SSHX Link:"
          grep -Eo 'https://sshx.io/[^ ]+' sshx_link.txt || echo "SSHX link not found"

      - name: Start 2-Minute Backup Loop
        run: |
          echo "Starting 2-minute backup loop..."
          cd $GITHUB_WORKSPACE
          nohup bash -c "while true; do
            TIMESTAMP=\$(date '+%Y%m%d_%H%M%S')
            BACKUP_DIR=\"$GITHUB_WORKSPACE/vps_backups/backup_\$TIMESTAMP\"
            mkdir -p \$BACKUP_DIR
            sudo rsync -a --exclude=/mnt --exclude=/proc --exclude=/sys --exclude=/dev --exclude=/run --exclude=/tmp / \$BACKUP_DIR/
            sudo chown -R runner:runner \$BACKUP_DIR
            cd \$GITHUB_WORKSPACE/vps_backups
            git add --all
            git commit -m \"Backup \$TIMESTAMP\" -q || true
            git push -f origin vps-backups
            cd ..
            sleep 120
          done" &
          echo "Backup loop running in background"

      - name: Keep VPS alive
        run: |
          echo "VPS running for 5h30..."
          sleep 19800

      - name: Auto Restart
        if: always()
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          WORKFLOW_FILE: main.yml
          RESTART_REF: main
        run: |
          echo "Triggering automatic restart..."
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $PAT_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_FILE/dispatches" \
            -d "{\"ref\":\"$RESTART_REF\"}"
          echo "Restart request sent"
